<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Iteration extends BaseIteration
{
  public function formatName($showComplete) {
    $name = $this->getName();
    
    if($showComplete)
      return sprintf('%s - %s', $this->getProject()->formatName($showComplete), $name);
    
    return $name;
  }
    
  public function getProduct() {
    return $this->getProject()->getProduct();
  }
  
  public function getManager() {
    return $this->getProject()->getManager();
  }  
  
  public function hasMembers() {
    return $this->getMembers()->count() > 0;
  }  
  
  public function getMembers() {
    return $this->getProject()->getMembers();
  }  
  
  public function getTasks() {
    return Doctrine::getTable('Task')->findByIteration($this);
  }

  public function countTasks() {
    return Doctrine::getTable('Task')->countByIteration($this);
  }

  public function countAvailableTasks() {
    return Doctrine::getTable('Task')->countAvailableByIteration($this);
  }

  public function getStories() {
    return Doctrine::getTable('Story')->findByIteration($this);
  }

  public function getEffortLeft() {
    $timestamp = 0;
    foreach($this->getTasks() as $task)
      $timestamp += $task->getEffortLeft();
    return $timestamp;
  }

  public function getOriginalEstimate() {
    $timestamp = 0;
    foreach($this->getTasks() as $task)
      $timestamp += $task->getOriginalEstimate();
    return $timestamp;
  }

  public function getCurrentEstimate() {
    $timestamp = 0;
    foreach($this->getTasks() as $task)
      $timestamp += $task->getCurrentEstimate();
    return $timestamp;
  }

  public function getEffortSpent() {
    $timestamp = 0;
    foreach($this->getTasks() as $task)
      $timestamp += $task->getEffortSpent();
    return $timestamp;
  }
  
  public function getColor() {
    if($this->isDone()) {
      return $this->isLate() ? '#ff5e07' : '#a4e142';
    }
    else {
      return $this->isLate() ? '#ff0000' : 'gray';
    }
  }
  
  public function isDone() {
    return $this->getEffortLeft() == 0;
  }
  
  public function isLate() {
    $endDate = strtotime($this->getEndDate());
    $today = strtotime('today');
    
    if(!$this->isDone() && $endDate < $today)
      return true;
    
    $lastWorkingUnit = WorkingUnitTable::getInstance()->getLastByIteration($this);
    
    if(!$lastWorkingUnit)
      return false;
    
    $lastDate = strtotime($lastWorkingUnit->getDate());
    
    return $endDate <= $lastDate;
  }
}