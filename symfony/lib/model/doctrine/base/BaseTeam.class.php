<?php

/**
 * BaseTeam
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $name
 * @property string $email
 * @property Doctrine_Collection $Users
 * @property Doctrine_Collection $UserPerTeam
 * 
 * @method string              getName()        Returns the current record's "name" value
 * @method string              getEmail()       Returns the current record's "email" value
 * @method Doctrine_Collection getUsers()       Returns the current record's "Users" collection
 * @method Doctrine_Collection getUserPerTeam() Returns the current record's "UserPerTeam" collection
 * @method Team                setName()        Sets the current record's "name" value
 * @method Team                setEmail()       Sets the current record's "email" value
 * @method Team                setUsers()       Sets the current record's "Users" collection
 * @method Team                setUserPerTeam() Sets the current record's "UserPerTeam" collection
 * 
 * @package    nubee
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTeam extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('team');
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('UserProfile as Users', array(
             'refClass' => 'UserPerTeam',
             'local' => 'team_id',
             'foreign' => 'user_id'));

        $this->hasMany('UserPerTeam', array(
             'local' => 'id',
             'foreign' => 'team_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}