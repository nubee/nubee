<?php

/**
 * BaseProject
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $user_id
 * @property integer $product_id
 * @property string $name
 * @property string $description
 * @property string $version
 * @property string $website
 * @property enum $status
 * @property sfGuardUser $Manager
 * @property Product $Product
 * @property Doctrine_Collection $Children
 * @property Doctrine_Collection $Parents
 * @property Doctrine_Collection $Members
 * @property Doctrine_Collection $Iterations
 * @property Doctrine_Collection $BacklogTasks
 * 
 * @method integer             getUserId()       Returns the current record's "user_id" value
 * @method integer             getProductId()    Returns the current record's "product_id" value
 * @method string              getName()         Returns the current record's "name" value
 * @method string              getDescription()  Returns the current record's "description" value
 * @method string              getVersion()      Returns the current record's "version" value
 * @method string              getWebsite()      Returns the current record's "website" value
 * @method enum                getStatus()       Returns the current record's "status" value
 * @method sfGuardUser         getManager()      Returns the current record's "Manager" value
 * @method Product             getProduct()      Returns the current record's "Product" value
 * @method Doctrine_Collection getChildren()     Returns the current record's "Children" collection
 * @method Doctrine_Collection getParents()      Returns the current record's "Parents" collection
 * @method Doctrine_Collection getMembers()      Returns the current record's "Members" collection
 * @method Doctrine_Collection getIterations()   Returns the current record's "Iterations" collection
 * @method Doctrine_Collection getBacklogTasks() Returns the current record's "BacklogTasks" collection
 * @method Project             setUserId()       Sets the current record's "user_id" value
 * @method Project             setProductId()    Sets the current record's "product_id" value
 * @method Project             setName()         Sets the current record's "name" value
 * @method Project             setDescription()  Sets the current record's "description" value
 * @method Project             setVersion()      Sets the current record's "version" value
 * @method Project             setWebsite()      Sets the current record's "website" value
 * @method Project             setStatus()       Sets the current record's "status" value
 * @method Project             setManager()      Sets the current record's "Manager" value
 * @method Project             setProduct()      Sets the current record's "Product" value
 * @method Project             setChildren()     Sets the current record's "Children" collection
 * @method Project             setParents()      Sets the current record's "Parents" collection
 * @method Project             setMembers()      Sets the current record's "Members" collection
 * @method Project             setIterations()   Sets the current record's "Iterations" collection
 * @method Project             setBacklogTasks() Sets the current record's "BacklogTasks" collection
 * 
 * @package    nubee
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseProject extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('project');
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('product_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('version', 'string', 16, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '16',
             ));
        $this->hasColumn('website', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('status', 'enum', null, array(
             'type' => 'enum',
             'notnull' => true,
             'values' => 
             array(
              0 => 'enabled',
              1 => 'disabled',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('sfGuardUser as Manager', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $this->hasOne('Product', array(
             'local' => 'product_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('ProjectRelation as Children', array(
             'local' => 'id',
             'foreign' => 'parent_id'));

        $this->hasMany('ProjectRelation as Parents', array(
             'local' => 'id',
             'foreign' => 'child_id'));

        $this->hasMany('ProjectMember as Members', array(
             'local' => 'id',
             'foreign' => 'project_id'));

        $this->hasMany('Iteration as Iterations', array(
             'local' => 'id',
             'foreign' => 'project_id'));

        $this->hasMany('BacklogTask as BacklogTasks', array(
             'local' => 'id',
             'foreign' => 'project_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $sluggable0 = new Doctrine_Template_Sluggable();
        $this->actAs($timestampable0);
        $this->actAs($sluggable0);
    }
}