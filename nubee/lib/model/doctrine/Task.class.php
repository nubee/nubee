<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class Task extends BaseTask
{
  public function getProduct() {
    return $this->getStory()->getProduct();
  }

  public function getProject() {
    return $this->getStory()->getProject();
  }

  public function getIteration() {
    return $this->getStory()->getIteration();
  }

  public function formatStatus() {
    switch($this->getStatus()) {
      case 'not_started' : return 'Not started';
      case 'started' : return 'Started';
      case 'done' : return 'Done';
    }
  }

  public function getEffortLeft() {
    return $this->getCurrentEstimate() - $this->getEffortSpent();
  }

  public function getEffortSpent() {
    $effort = 0;
    foreach($this->getWorkingUnits() as $workingUnit)
      $effort += $workingUnit->getEffortSpent();
    return $effort;
  }

  public function isNotStarted() {
    return $this->getStatus() == 'not_started';
  }

  public function isStarted() {
    return $this->getStatus() == 'started';
  }

  public function isDone() {
    return $this->getStatus() == 'done';
  }

  public function addWorkingUnit(WorkingUnit $workingUnit)
  {
    if($workingUnit->getEffortSpent() > $this->getEffortLeft())
      throw new Exception('Effort can\'t be more than left');

    $workingUnit->setTask($this);
    $this->WorkingUnits[] = $workingUnit;

    $this->save();
  }

  public function removeWorkingUnit(WorkingUnit $workingUnit)
  {
    $i = $this->getWorkingUnitIndex($workingUnit->getId());

    $this->WorkingUnits->remove($i);
    $this->save();
  }

  public function getWorkingUnitIndex($id) {
    foreach($this->WorkingUnits as $i => $workingUnit)
      if($workingUnit->getId() == $id)
        return $i;

    throw new Exception("Undefined index: " . $id);
  }
  
  public function updateStatus()
  {
    if($this->getEffortSpent() > 0) {
      if($this->getEffortLeft() > 0) {
        $this->setStatus('started');
      }
      else {
        $this->setStatus('done');
      }
    }
    else {
      $this->setStatus('not_started');
    }
  }

  public function save(Doctrine_Connection $conn = null)
  {
    if ($this->isNew())
    {
      $this->setCurrentEstimate($this->getOriginalEstimate());
    }

    $this->updateStatus();

    return parent::save($conn);
  }
}